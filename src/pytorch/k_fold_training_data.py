from random import shuffle as random_shuffle

from torch.utils.data import DataLoader

from training_data import (
    InstanceDataset,
    generate_optimal_state_value_pairs,
    load_training_state_value_pairs,
)


class KFoldTrainingData():
    def __init__(self, samples_file, batch_size = 100, num_folds = 10, shuffle = False):
        # Getting training data from sas_plan generated by the sampling engine.
        self.state_value_pairs, self.domain_max_value = load_training_state_value_pairs(samples_file)
        self.batch_size = batch_size
        self.num_folds = num_folds
        self.kfolds = self.generate_kfold_training_data()


    # def __init__(self, domain, problems, batch_size, num_folds = 10, shuffle = False):
    #     if shuffle:
    #         random_shuffle(problems)
    #     self.problems = problems
    #     self.using_sampled_states = problems[0][-5:] != ".pddl"

    #     if self.using_sampled_states:
    #         # Getting training data from sas_plan generated by the sampling engine.
    #         self.state_value_pairs, self.domain_max_value = load_training_state_value_pairs(problems)
    #     else:
    #         # Getting training data from PDDL files.
    #         self.state_value_pairs = generate_optimal_state_value_pairs(domain, problems)
    #         self.domain_max_value = 0 # TODO in case we'll need PDDL files.

    #     #self.domain_max_value = domain_max_value
    #     self.batch_size = batch_size
    #     self.num_folds = num_folds
    #     assert len(self.state_value_pairs) % self.num_folds == 0
    #     self.kfolds = self.generate_kfold_training_data()


    def generate_kfold_training_data(self):
        """
        Generate the folds.
        Return two list of tuples of size num_folds: dataloaders and problems.
        The first item corresponds to train set, and the second to test set. 
        """

        instances_per_fold = int(len(self.state_value_pairs) / self.num_folds)
        kfolds = []
        for i in range(self.num_folds):
            training_set, test_set = [], []

            for j in range(len(self.state_value_pairs)):
                if int(j / instances_per_fold) == i:
                    test_set.append(self.state_value_pairs[j])
                    # if not self.using_sampled_states:
                    #     test_problems.append(self.problems[j])
                else:
                    training_set.append(self.state_value_pairs[j])
                    # if not self.using_sampled_states:
                    #     training_problems.append(self.problems[j])
            
            train_dataloader = DataLoader(dataset=InstanceDataset(training_set, self.domain_max_value),
                                          batch_size=self.batch_size, num_workers=1)
            test_dataloader = DataLoader(dataset=InstanceDataset(test_set, self.domain_max_value),
                                          batch_size=self.batch_size, num_workers=1)

            kfolds.append((train_dataloader, test_dataloader))
        
        return kfolds


    def get_fold(self, idx):
        """
        Returns a fold as tuple(train dataloader, test dataloader).
        Counting from 0.
        """
        return self.kfolds[idx]


    def get_num_fold(self):
        """
        Returns num_folds
        """
        return len(self.num_folds)
